(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     51003,       1138]
NotebookOptionsPosition[     38484,        869]
NotebookOutlinePosition[     46252,       1068]
CellTagsIndexPosition[     46209,       1065]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Assignment 1 - Combinatorics", "Title",
 CellChangeTimes->{{3.934524828960594*^9, 3.934524829362063*^9}, {
  3.9349455999253955`*^9, 3.9349456154287243`*^9}, {3.934945739324092*^9, 
  3.934945742890353*^9}},ExpressionUUID->"2e086750-1cf1-4c43-bc57-\
bac07652a650"],

Cell["\<\
Course code: IX1500
Date: 2024-09-16\
\>", "Text",
 CellChangeTimes->{{3.934524791477029*^9, 
  3.9345248066337175`*^9}},ExpressionUUID->"679e81cd-23f2-4ac3-aad0-\
55498a6469d8"],

Cell["\<\
Sebastian Taavo Ek, sebte@kth.se
Simon Lieb Fredriksson, simonlf@kth.se\
\>", "Text",
 CellChangeTimes->{{3.934524810135605*^9, 
  3.934524823595066*^9}},ExpressionUUID->"39bfcd1a-7896-4364-9d2c-\
9b6c98366775"],

Cell[CellGroupData[{

Cell["Task 1: A moving particle", "Subchapter",
 CellChangeTimes->{{3.93452490088789*^9, 3.9345249040119247`*^9}, {
  3.9349543449967127`*^9, 
  3.9349543476398726`*^9}},ExpressionUUID->"2760ab7a-2fed-4ae4-a63f-\
890119ad5062"],

Cell[CellGroupData[{

Cell["Summary", "Section",
 CellChangeTimes->{{3.9345258611499033`*^9, 
  3.934525861219301*^9}},ExpressionUUID->"28ab532a-4f99-4328-b494-\
a8a51a0e3e70"],

Cell[CellGroupData[{

Cell["Task", "Subsection",ExpressionUUID->"4df8543c-22f8-401d-8973-c66d5fa62864"],

Cell[TextData[{
 "In this lab, we studied the movement of a particle within a 2D plane under \
specific constraints. The particle\[CloseCurlyQuote]s movement is defined by \
the following rules:\nU :(m, n) \[RightArrow] (m + 1, n + 1)\nL :(m, n) \
\[RightArrow] (m + 1, n \[Minus] 1)\n\nThe tasks for the lab were as follows:\
\na) Determine the total number of possible paths the particle can take from \
the point (0, 3) to the point (7, 2), and explain and print all such paths.\n\
\nb) Identify and print all paths from a) that cross or touch the x-axis at \
least once.\n\nc) Identify all paths from a) that never cross or touch the \
x-axis.\n\nd) Calculate the total number of paths the particle can take from \
the point (7, 6) to the point (20, 5) that never cross or touch the x-axis\n\n\
As part of this lab, the student was allowed to use Mathematica or other \
programming languages to generate and study the various permutations of the \
task. For our group, we chose Python since it\[CloseCurlyQuote]s a language \
we\[CloseCurlyQuote]re both fairly used to working with. Find the GitHub \
repository by following the ",
 ButtonBox["hyperlink here",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/SimonLieb/Project_1"], None},
  ButtonNote->"https://github.com/SimonLieb/Project_1"],
 ", with details about how to run the files at the bottom of this report as \
well as in the README within the repository."
}], "Text",
 CellChangeTimes->{
  3.9345250344807625`*^9, {3.9345256631354046`*^9, 3.9345258347856503`*^9}, {
   3.93452595137138*^9, 3.9345260867873735`*^9}, {3.9345261463381767`*^9, 
   3.9345262001973324`*^9}, {3.9345263054256535`*^9, 3.934526306171752*^9}, {
   3.9345263428446407`*^9, 3.934526412337055*^9}, {3.9345264570966454`*^9, 
   3.9345265152771635`*^9}, {3.9349457844674807`*^9, 3.934945845198888*^9}, {
   3.9349459168233185`*^9, 3.9349460000893993`*^9}, {3.9349462550424995`*^9, 
   3.9349462603341417`*^9}, {3.9349668704123735`*^9, 
   3.934966926258996*^9}},ExpressionUUID->"8ad5d4da-afa2-434b-a402-\
a9f9b705fa59"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Result", "Subsection",ExpressionUUID->"39a0ef6c-6a2c-4081-9062-84513a76c571"],

Cell["\<\
In this section we will present the results, split into sub-assignments a) \
through d).

a) To determine the total number of possible paths that the particle can take \
from the point (0,3) to the point (7,2), we first began with calculating how \
many steps we needed to take in total. This could be calculated by finding \
the difference in x-values, which is |7|. (i) Since every move U or L is a \
positive increment of 1 on the x-axis, this is the number of elements that we \
will need to arrange.

Secondly, since our starting point and end point have differing y values, we \
needed to find out the proportion of U moves to L moves. In this case, we \
start at y = 3, and want to move to y = 2. (ii) This means that there needs \
to be one more L move than U move in our arrangement. 
\[LineSeparator](i) and (ii) \[Implies] The arrangement we needed to permute \
is therefore LLLL UUU, four Ls and three Us. The amount of ways that this can \
be permuted can be calculated by dividing the factorial of the number of \
elements with the product of the number of each element in factorials. \
Otherwise known as the permutation of multiset formula.\
\>", "Text",
 CellChangeTimes->{{3.9349460122920895`*^9, 3.9349460875554533`*^9}, {
  3.93494612284284*^9, 3.934946216042962*^9}, {3.9349462994884214`*^9, 
  3.934946377826358*^9}, {3.9349464325329223`*^9, 3.9349464414925227`*^9}, {
  3.934946482998205*^9, 3.934946567557053*^9}, {3.9349473439037313`*^9, 
  3.934947367335803*^9}},ExpressionUUID->"90c1cbf5-a4eb-4e8c-ad08-\
b66c37545d27"],

Cell[BoxData[
 FormBox[
  RowBox[{"P", "=", 
   FractionBox[
    RowBox[{"n", "!"}], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         SubscriptBox["k", "1"], "!"}], " ", 
        RowBox[{
         SubscriptBox["k", "2"], "!"}], " ", 
        RowBox[{
         SubscriptBox["k", "3"], "!"}]}], "..."}], 
      RowBox[{
       SubscriptBox["k", "r"], "!"}]}], ")"}]]}], TraditionalForm]], "Input",
 CellChangeTimes->{{3.9349473707230263`*^9, 3.9349474039808435`*^9}, 
   3.934947480415062*^9, {3.93494752755296*^9, 
   3.934947567969548*^9}},ExpressionUUID->"a80c6013-eebe-4815-99b4-\
d257d30cd140"],

Cell[TextData[{
 "Where ",
 StyleBox["P",
  FontSlant->"Italic"],
 " is the total amount of permutations, ",
 StyleBox["n",
  FontSlant->"Italic"],
 " is the number of elements we wish to permute, and ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "1"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "f47e6a60-9089-4fff-9699-ab54c4d99a2b"],
 " through ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["k", "r"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "dc5543a5-bf3a-4b95-9a17-a2a344db0964"],
 " are the number of repetitions of each distinct element. In our case, this \
comes out as:"
}], "Text",
 CellChangeTimes->{{3.9349475700412655`*^9, 3.93494757736296*^9}, {
  3.934947669360889*^9, 3.9349477214451957`*^9}, {3.934947789011118*^9, 
  3.9349478074459133`*^9}},ExpressionUUID->"dac7d079-5a1d-44e2-92c2-\
3e9f49886386"],

Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"7", "!"}], 
    RowBox[{
     RowBox[{"4", "!"}], " ", 
     RowBox[{"3", "!"}]}]], "=", "35"}], TraditionalForm]], "Input",
 CellChangeTimes->{{3.934946629773939*^9, 
  3.934946689243883*^9}},ExpressionUUID->"dc304521-ab96-44c8-a91b-\
ddd9e65b2ef1"],

Cell[TextData[{
 "These 35 arrangements are generated by our code, which can be found in our \
GitHub repo, as well as here below. To generate this print yourself, run the \
file with the corresponding name to the task in the ",
 ButtonBox["repo",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/SimonLieb/Project_1"], None},
  ButtonNote->"https://github.com/SimonLieb/Project_1"],
 ".\[LineSeparator]\nUUULLLL, UULULLL, UULLULL, UULLLUL, UULLLLU, ULUULLL, \
ULULULL, ULULLUL, ULULLLU, ULLUULL, ULLULUL, ULLULLU,\nULLLUUL, ULLLULU, \
ULLLLUU, LUUULLL, LUULULL, LUULLUL, LUULLLU, LULUULL,\.08 LULULUL, LULULLU, \
LULLUUL, LULLULU,\nLULLLUU, LLUUULL, LLUULUL, LLUULLU, LLULUUL, LLULULU, \
LLULLUU, LLLUUUL, LLLUULU, LLLULUU, LLLLUUU"
}], "Text",
 CellChangeTimes->{{3.9349465712038136`*^9, 3.9349465717252693`*^9}, {
  3.934946610270589*^9, 3.934946625602086*^9}, {3.9349467129036255`*^9, 
  3.934946713852264*^9}, {3.934946765387491*^9, 3.9349467831858873`*^9}, {
  3.934946826245946*^9, 3.9349469002838316`*^9}, {3.934946974608442*^9, 
  3.9349470318376513`*^9}, {3.9349470665483756`*^9, 3.93494716609317*^9}, {
  3.9349478254880533`*^9, 3.9349478788892374`*^9}, {3.934966964223838*^9, 
  3.9349669642248755`*^9}},ExpressionUUID->"a34d7bec-dc6c-4e76-9b40-\
e2ff30e28ace"],

Cell["\<\
b) For the second part of the first task, we needed to find how many of the \
35 paths presented above ever touch or cross the x-axis. Another way of doing \
this was to verify how many of the paths ever touched (3, 0) or (5, 0). We \
did this first on paper, and then using Python to generate all the LU \
combinations.\[LineSeparator]\[LineSeparator]The first step was to take the \
same amount of Ls and Us as in the first question, but then we split the \
question in two. Since there was only path that could take us to to (3, 0) to \
begin with; by first moving L three times, we froze those three Ls at the \
beginning of the permutation and permuted the rest. This is another \
permutation of multiset with the following quotient:\
\>", "Text",
 CellChangeTimes->{{3.934947881359661*^9, 3.9349479822638693`*^9}, {
  3.9349480192142467`*^9, 3.9349480276005487`*^9}, {3.934948071550282*^9, 
  3.9349481928314276`*^9}, {3.9349482353466454`*^9, 
  3.9349482430285997`*^9}},ExpressionUUID->"54cbf463-30b2-4ce0-adb2-\
e23f248c38a6"],

Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"4", "!"}], 
    RowBox[{
     RowBox[{"3", "!"}], " ", 
     RowBox[{"1", "!"}]}]], "=", "4"}], TraditionalForm]], "Input",
 CellChangeTimes->{{3.934948252503245*^9, 
  3.9349482780665236`*^9}},ExpressionUUID->"22c74d0b-d2b7-450a-9665-\
f2bb8e5f2b17"],

Cell["\<\
Where 4 is the total number of elements to permute given that we froze three \
Ls at the start, and 3 is the number of repetitions of U, and 1 is the number \
of repetitions of L. This quotient represents the number of paths we can take \
from the start to the coordinate (3, 0), and then moving to the end point (7, \
2). Now, this is only the first half of the problem.\[LineSeparator]\
\[LineSeparator]For the second coordinate (5, 0) which we need to hit in \
order to touch the x-axis at least once, we can work from the other way \
around. We begin with freezing two Us at the end of the arrangement since \
they are the only steps we can take to reach the end point from (5, 0). Now \
we can work with the same reasoning as above, and permute the remaining 4 Ls \
and 1 U to find all the paths from the start point (0, 3) to (5, 0). It comes \
out as follows:\
\>", "Text",
 CellChangeTimes->{{3.934948290200995*^9, 
  3.9349485339897575`*^9}},ExpressionUUID->"077534bf-48d2-4c68-96cb-\
1ae921a2bb97"],

Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"5", "!"}], 
    RowBox[{
     RowBox[{"4", "!"}], " ", 
     RowBox[{"1", "!"}]}]], "=", "5"}], TraditionalForm]], "Input",
 CellChangeTimes->{{3.934948544513674*^9, 
  3.934948562205637*^9}},ExpressionUUID->"da80ae0c-8421-4e52-9d6d-\
31afcc9bbb07"],

Cell["\<\
This quotient represents the number of ways we can go from the start point \
(0, 3) to the end point (7, 2) while touching the x-axis at (5, 0). However, \
we can\[CloseCurlyQuote]t simply add 5 and 4 to find out the number of ways \
in total, since these arrangements have some overlaps. These overlaps occur \
when we touch both (3, 0) and (5, 0). 

Since there are two steps between these two numbers, and we can only go \
diagonally up and down in the positive x direction, this means that there are \
only two ways to go from one to the other. Either by bouncing above the \
x-axis, or dipping below it and back up. These can be written as LU or UL. \
When we calculated our quotients 5 and 4, both of these amounts incorporated \
these paths. Therefore, we can subtract two from the total to only \
incorporate them once and avoid any duplicates. The total amount of paths \
which touch the x-axis between (0, 3) and (7, 2) is therefore:\
\>", "Text",
 CellChangeTimes->{{3.934948565499611*^9, 3.934948702646914*^9}, {
  3.9349487334116044`*^9, 
  3.9349488496039658`*^9}},ExpressionUUID->"62de34ba-dcd3-4ca5-ae28-\
7c93241fb7fd"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{"4", "!"}], 
     RowBox[{
      RowBox[{"3", "!"}], " ", 
      RowBox[{"1", "!"}]}]], "+", 
    FractionBox[
     RowBox[{"5", "!"}], 
     RowBox[{
      RowBox[{"4", "!"}], " ", 
      RowBox[{"1", "!"}]}]], "-", "2"}], " ", "=", " ", 
   RowBox[{
    RowBox[{"5", "+", "4", "-", "2"}], "=", "7"}]}], 
  TraditionalForm]], "Input",
 CellChangeTimes->{{3.9349488534166555`*^9, 
  3.9349489081506033`*^9}},ExpressionUUID->"0fdf2727-bb0f-4303-8b22-\
a791541bfa66"],

Cell[TextData[{
 "Or a total of 7 ways . Our code generates these as:\[LineSeparator]ULLLLUU, \
LULLLUU, LLULLUU, LLLUUUL, LLLUULU, LLLULUU, LLLLUUU.\[LineSeparator]\
\[LineSeparator]To run the corresponding code of our program, make sure you \
have the external python library matplotlib installed. ",
 ButtonBox["Our code",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/SimonLieb/Project_1"], None},
  ButtonNote->"https://github.com/SimonLieb/Project_1"],
 " includes graphs which illustrate the paths listed above.\n\nc) The third \
sub-assignment asks us to find all the paths that never touch the x-axis. We \
know from the previous answers that there are (35 - 7 =) 28 of these. We can \
find these by taking the difference between the first set of paths and the \
second. If we let the set of all paths from (0, 3) to (7, 2) be called A, and \
the set of all paths between those two coordinates that also touch the x-axis \
be called B, then we can define the set of paths that fo from (0, 3) to (7, \
2) without touching the x-axis as A - B = C. The set of paths in C are \
printed by our code as:\[LineSeparator]\nULLULUL, ULUULLL, LULULLU, ULLLUUL, \
LULULUL, LLUUULL,\.08 UULLULL,ULLULLU, ULLLULU, LUULLUL, UULULLL, LLUULLU,\n\
LLULULU, LUULULL, ULULULL, LUULLLU, LLUULUL, ULLUULL, LULLUUL, UULLLUL, \
UULLLLU, LULUULL, LUUULLL, ULULLUL, \nULULLLU, LULLULU, LLULUUL, UUULLLL\
\[LineSeparator]\[LineSeparator]As with the previous sub-assignment, make \
sure you have matplotlib installed if you are compiling ",
 ButtonBox["the code",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/SimonLieb/Project_1"], None},
  ButtonNote->"https://github.com/SimonLieb/Project_1"],
 " in Python when verifying these prints. It should print a graphic \
presentation of all these paths.\n\nd) The final sub-assignment for the first \
task was to combine some of the methods from the previous three \
sub-assignments and calculate the number of paths between two more distantly \
spaced coordinates (7, 6) and (20, 5), which never touch the x-axis. As with \
the previous exercise, we will solve this by first finding all the paths that \
do touch the x-axis, and subsequently subtracting them from the total number \
of paths. There are 13 moves in total between those two coordinates, obtained \
by finding the difference in x values, and since we are going down one step \
on the y-axis in total, we need one more L than U in our arrangement. This \
comes out as 13 elements, of which 7 are L and 6 are U. The total \
permutations with multiset is therefore:"
}], "Text",
 CellChangeTimes->{{3.934948913093672*^9, 3.9349489294335084`*^9}, {
   3.93494926524205*^9, 3.9349495622292376`*^9}, {3.9349496014389596`*^9, 
   3.9349497473446736`*^9}, {3.934949778862419*^9, 3.934949802708789*^9}, {
   3.9349498488110914`*^9, 3.9349499504638906`*^9}, 3.93495000728868*^9, {
   3.934950067538297*^9, 3.934950165002843*^9}, {3.9349508866978292`*^9, 
   3.934950895683919*^9}, {3.9349669987443943`*^9, 
   3.934967017622896*^9}},ExpressionUUID->"abceaff9-7f5d-4f3d-8401-\
2dd49d09a3f1"],

Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"13", "!"}], 
    RowBox[{
     RowBox[{"7", "!"}], " ", 
     RowBox[{"6", "!"}]}]], "=", "1716"}], TraditionalForm]], "Input",
 CellChangeTimes->{{3.9349501691610346`*^9, 
  3.9349502056370363`*^9}},ExpressionUUID->"c74f9091-5539-45d7-8b1c-\
2915e2cf2f11"],

Cell["\<\
And like in the previous exercise, there are a limited number of x-values we \
can touch if we want to hit the x-axis. For d), these are x = 13, and x =15. \
Even though x = 14 also occurs between these two values, it is effectively \
unreachable because of the restrictions in our movement. If we start on an \
odd x-value, we will only ever be able to touch the x-axis on an odd value as \
well. We therefore need to study all the permutations that touch specifically \
x =13 and x = 15, while eliminating all duplicates. In our code, we first \
start off by generating all 1716 of the total possible ways to move from the \
start to the end point, and then we pass them as a parameter to a sorting \
algorithm. The algorithm defines our starting position as the starting point\
\[CloseCurlyQuote]s y value, and then goes through every L and U of each \
movement set. When it finds an L, it decrements the starting position\
\[CloseCurlyQuote]s y value by 1, and when it finds a U it increments it. \
After each such step, we check if the starting point has been taken to a \
value of 0 or below. If it has, we break and add that path to a list of paths \
which touch the x-axis. The loop then continues for the remaining LU \
combinations and checks the same. By the end of it, we have a separate and \
new list of paths which touch the x-axis.

Once both sets of paths have been generated, we again find the difference \
between all possible paths and all paths which touch the x axis, which gives \
us all paths which do not touch the x-axis. In our case, there are 13 paths \
which touch and 1716 total: meaning that the answer we\[CloseCurlyQuote]re \
looking for is:\
\>", "Text",
 CellChangeTimes->{{3.9349502087439976`*^9, 3.934950371253128*^9}, {
  3.9349505278110757`*^9, 3.9349505847763805`*^9}, {3.9349506156759963`*^9, 
  3.934950797459509*^9}, {3.934951000734066*^9, 
  3.9349510442462435`*^9}},ExpressionUUID->"9c1180d7-7cd9-4ee5-b922-\
4488391b2dc3"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"1716", "-", "13"}], "=", "1703"}], TraditionalForm]], "Input",
 CellChangeTimes->{{3.9349507991784105`*^9, 
  3.934950812406621*^9}},ExpressionUUID->"fd2eecc7-4f0d-4789-9b66-\
11c9c2168bd4"],

Cell[TextData[{
 "Find all the prints of those combinations by running the corresponding \
Python file in ",
 ButtonBox["the repo",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/SimonLieb/Project_1"], None},
  ButtonNote->"https://github.com/SimonLieb/Project_1"],
 "."
}], "Text",
 CellChangeTimes->{{3.9349508140734153`*^9, 3.934950879392687*^9}, {
  3.9349536557337914`*^9, 3.9349536792581787`*^9}, {3.934967042513847*^9, 
  3.934967042514844*^9}},ExpressionUUID->"3c35fad2-59ee-4558-8bee-\
95b59127c59b"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Task 2: Committee vote outcomes", "Subchapter",
 CellChangeTimes->{{3.9345249583415747`*^9, 3.934524967963314*^9}, {
  3.934954325105908*^9, 
  3.9349543388375454`*^9}},ExpressionUUID->"099ee814-8db2-4a63-8b88-\
1c9110418edc"],

Cell[CellGroupData[{

Cell["Summary", "Section",
 CellChangeTimes->{{3.9349542419047785`*^9, 
  3.9349542420297003`*^9}},ExpressionUUID->"4332511c-4b0e-4fff-a557-\
cc5bbf57a309"],

Cell[CellGroupData[{

Cell["Task", "Subsection",ExpressionUUID->"5c103694-4f0e-4da5-8449-310c802b22a8"],

Cell["\<\
For the second task, we are to consider the following situation:\
\[LineSeparator]A committee of 11 members are voting for a candidate A or B. \
We are to suppose that candidate A receives 9 votes, and candidate B receives \
2. In how many ways can the ballot then be selected, one at a time, so that A \
always remains ahead of B? We then have to calculate the probability that A \
would be strictly ahead of B throughout the count.\
\>", "Text",
 CellChangeTimes->{{3.9349543827380023`*^9, 3.9349545136295214`*^9}, {
  3.9349560034838705`*^9, 
  3.934956021797202*^9}},ExpressionUUID->"c299c6da-f79a-4138-80fb-\
9d77fb5a52bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Result", "Subsection",ExpressionUUID->"7b609863-e4df-4ca9-8aa1-cbe4137518cf"],

Cell["\<\
To calculate the probability we can first consider the problem in terms of L \
and U, similar to the previous task. If there is a committee of 11 members, \
then that is the amount of L and U we need to permute. Let U represent the \
number of votes cast for A, while L represents the number of votes cast for \
B. Our arrangement of L and U then comes out as 9 Us and 2 Ls. (UUUUUUUUU LL)

In order for us to fulfill the condition that A is always ahead of B, the \
first vote pulled out of the ballot must always be U. Similarly, the second \
vote drawn out of the ballot must always be U as well - because otherwise the \
two candidates would be tied for votes at the second pull. This would break \
the condition that A must always be strictly ahead. This means that we can \
freeze two votes U at the beginning of our arrangement before we start \
permuting. After having done that, there is only 1 permutation in which we \
break even, since there are two Ls in the arrangement. A starting combination \
of UULL would break even and break the condition, but every other permutation \
is valid to our restrictions.
\[LineSeparator]The amount of ways we can permute 9 Us and 2 Ls so that there \
are always more of U than L is therefore:\
\>", "Text",
 CellChangeTimes->{{3.9349545540327206`*^9, 3.9349547515361967`*^9}, {
  3.9349551932958417`*^9, 3.934955195687001*^9}, {3.934955256355302*^9, 
  3.934955257393737*^9}, {3.9349553372188306`*^9, 3.9349553484624557`*^9}, {
  3.934955480993658*^9, 3.934955541854903*^9}, {3.9349562298983107`*^9, 
  3.934956231167675*^9}, {3.9349572046222253`*^9, 
  3.9349572068170147`*^9}},ExpressionUUID->"e21c54be-d0fb-4236-8998-\
57acdd091c0d"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{"9", "!"}], 
     RowBox[{
      RowBox[{"7", "!"}], " ", 
      RowBox[{"2", "!"}]}]], "-", "1"}], "=", "35"}], 
  TraditionalForm]], "Text",
 CellChangeTimes->{{3.9349555438147326`*^9, 3.934955554407987*^9}, {
  3.9349555892559443`*^9, 3.9349556042809315`*^9}, {3.934963841321245*^9, 
  3.934963848164482*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"1d80f4a4-9cbf-4e19-848c-a7e5727369dd"],

Cell[TextData[{
 "Or 35 ways. As a reminder, we subtract the one to account for the only \
permutation in which two Ls follow the frozen UU. \n\[LineSeparator]The next \
step is then to find the total number of ways we can pull the votes from the \
ballot ",
 StyleBox["without",
  FontSlant->"Italic"],
 " restrictions. The total number of ways can be found using 11 choose 2, \
which is the following:"
}], "Text",
 CellChangeTimes->{{3.9349556070344496`*^9, 3.934955660488527*^9}, {
  3.9349562651169004`*^9, 3.9349562801234283`*^9}, {3.934957036625797*^9, 
  3.934957042071498*^9}, {3.9349572323356123`*^9, 3.934957254718154*^9}, {
  3.9349576045112877`*^9, 3.934957694730088*^9}, {3.9349577567775483`*^9, 
  3.9349577687009444`*^9}, {3.934957845203349*^9, 3.934957847830453*^9}, {
  3.934957892620409*^9, 3.93495795753408*^9}, {3.9349583054683003`*^9, 
  3.934958345481373*^9}},ExpressionUUID->"bb662758-9107-4256-81fe-\
94034b87d5a5"],

Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{"11", "!"}], 
    RowBox[{
     RowBox[{"9", "!"}], " ", 
     RowBox[{"2", "!"}]}]], "=", "55"}], TraditionalForm]], "Text",
 CellChangeTimes->{{3.9349577719520545`*^9, 3.934957783610866*^9}, 
   3.934957866608449*^9, 
   3.9349638967927327`*^9},ExpressionUUID->"223a39d8-b370-4b05-8f7d-\
365cc73ab8de"],

Cell["\<\
This means that the probability of us pulling the votes from the ballot in a \
way where A is always ahead of B can be calculated as as quotient of the \
amount of cases in which it happens, over the total amount of outcomes:\
\>", "Text",
 CellChangeTimes->{{3.934957982790637*^9, 3.9349580431278725`*^9}, {
  3.9349583520398903`*^9, 
  3.9349583699957466`*^9}},ExpressionUUID->"fd13580f-2df5-4cdb-b66f-\
f99f25de5dbb"],

Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox[
    RowBox[{
     FractionBox[
      RowBox[{"9", "!"}], 
      RowBox[{
       RowBox[{"7", "!"}], " ", 
       RowBox[{"2", "!"}]}]], "-", "1"}], 
    FractionBox[
     RowBox[{"11", "!"}], 
     RowBox[{
      RowBox[{"9", "!"}], " ", 
      RowBox[{"2", "!"}]}]]], "=", 
   RowBox[{
    FractionBox["35", "55"], "=", 
    FractionBox["7", "11"]}]}], TraditionalForm]], "Text",
 CellChangeTimes->{{3.9349580542179565`*^9, 3.9349581718427277`*^9}, 
   3.934963903562967*^9},ExpressionUUID->"b8172aff-bdcd-42b9-a27f-\
5a260fa60dbb"],

Cell["\<\
Therefore the answer to the question is a probability of 7/11, or roughly 64 \
%. \
\>", "Text",
 CellChangeTimes->{{3.934958182792626*^9, 3.934958234461692*^9}, {
  3.9349582739343243`*^9, 3.9349582870366077`*^9}, {3.934969146725726*^9, 
  3.9349692783077435`*^9}, {3.934972011447625*^9, 
  3.934972012210728*^9}},ExpressionUUID->"d160651b-70cb-4776-a22b-\
7d64bc7eafe6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["An alternate solution - Bertrand\[CloseCurlyQuote]s ballot theorem", \
"Subsection",
 CellChangeTimes->{{3.934971682897252*^9, 
  3.934971691050658*^9}},ExpressionUUID->"e65161cf-4c93-4f9e-badd-\
0c31a93dbab3"],

Cell[TextData[{
 "After having completed the assignment this way, we found through some \
research that there was an already established method of solving exactly this \
issue. There is a theorem known as ",
 ButtonBox["Bertrand's ballot theorem",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Bertrand%27s_ballot_theorem"],
 ", which rules that the number of favourable sequences can be calculated in \
the following way:"
}], "Text",
 CellChangeTimes->{{3.934958182792626*^9, 3.934958234461692*^9}, {
  3.9349582739343243`*^9, 3.9349582870366077`*^9}, {3.934969146725726*^9, 
  3.9349692783077435`*^9}, {3.9349717206468363`*^9, 3.9349717250554743`*^9}, {
  3.9349718250893574`*^9, 
  3.934971837460969*^9}},ExpressionUUID->"e874269b-a34b-444e-be32-\
333f03326675"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnQlsVUUXx28+xEIaFKHILmCIxBqKLAIi0n4g1KoUwtImxSItm2Wr0o8A
EQhBVBAhBQ0gQlKKCgpirQEMRWLUKIR9DbuAxiVIWETCUuD78U6cXPveu71r
b9vcf0Lz3ry5c5Y5c+acuTNDq+zcAaP+o2laXi3+DMia/N+JE7OmDqzLl8ET
8nJGTxg5ImXC/0aOHjmxa3YNCvvxr4B/dz/fCRAgQIAAAQIECBAgQIAAjnE7
BL+5KB9VgsnKhn379iUmJpaUlPjNSDn4+uuvU1NT9+7d6zcjVQl79ux57LHH
Nm/efOvWLb95KQcM3vfeey8+Ph6D9JuXqoE//vgjISFh+vTplb9zBfCZl5eH
Qe7fv99vXio7SktLhw8fjmfmg9+8WABd3K9fv7Zt2/76669+81J5ga9bsmSJ
pmlbtmzxiMStELxo+eDBg02bNh0yZEhVcTsVj507d8bFxeXm5npHYnoIHjW+
dOlSjDM/P9+j9qs0cMgpKSkMgZ9++sk7Kp72LyO3Z8+ezZs3tycCj6tUiw83
b96s+EnKI/+GOKgd4583b160CgirSJf5ah4O+xe6eg2EZ77r169HipycHEu8
IQtcYd6vvvoqD544cWLcuHE9evQYPXr0999/b5tbS4CH999/Pzs7Ozk5GWZu
3LixYMGCadOmuZLdX7p0qXXr1sQnGG34r4icnp6elJSEvHyGk/79+6ONF198
saCgwJImbfcvVFavXj1hwoTu3bvz9/jx42vWrKELylDna+fOneni7du3m2wZ
cTIyMkiysG0eJNV66KGHcPJoGPVS8u2339pg2BJQ+6BBg1544YWioqKTJ0/S
EXyFNFw5bxwLWbx4Ma3NmTMnYoUZM2ZkZmYiJnXoYv6i4evXr0Nd5jvzNmav
f+mC8ePHY4HwSQ/SQocOHSCdlpYWTlq6iSzAJFe///479Qm8iSr5QJ6lVktW
rVpFCWr3dIkM6aQ3T506JSXbtm3TQjh9+rTz9jEeBkXDhg1/+eWXiNTbt2//
8ccfnzt3Tohi2PLT+fPn+cp899dff5mkZaN/6dBhw4ZB6Msvv1QsCSeffPJJ
eP2ff/75gQce4Ncff/zRTPuFhYXPPPMMbb7yyis8pWevpKSEkiZNmkT0Ubet
IBp1fnrnnXdk4KhCJghK4MqVuVjmLKaeiL/u2bOHX7GBtWvX8qFv376KWwpF
zxHXjiKKOS0ESxr47LPPIJGVlaWEpS9atmwZGxuLyUV8ZOTIkTwydepUM+Pu
wIEDMq2LY9+wYYP6CW9JSbNmzSLqmeky0TSirb2Qs9Ste3er1UcffaQKly9f
TgmJjHO/AeeDBw+mtV27dkWrgD4hhE8uY95nz56V/j18+HCZp3jEvOyCiLLQ
Trdu3SCByKpQzJvuiGbeMu6Yxczbv/iiJ554QkUgPPvGG29QiPOMyNuxY8dK
TCMaJ++++67oELcjJdDCmMuIbBs4MZrq2rWrsSr4tV27dtTUr+R/8cUXlDRo
0CD8WZhEqC1hkPEbXh5NA1idiK+Pl8S8cdrRzJum2rRpQ52NGzea1IPIgqmr
NmkEqytj0q5j6NChkEhISFAl0OUrhTgWh40jC0E4TTH1GNf8888/qUZgqc9N
xA2mpqaaHyZW598VK1ZAIiYmRk931KhRFGL5Bg8SEotcZlwcdaZMmXJ3h2pe
nircvHkzJY8//vjly5fNM2wJ0CUTgQrRoyokfqaEECJiLmMJKE30gCzGNWXy
1XtRHFrjxo2ZO3bs2GGeotX+XbRoEXSJlvWTfseOHSlk5jJ4kMlRGDZje8wC
pFp6PfDUSy+9RAkhtHfBMy0zyUKF8FWVvPbaa5QMHDjQOV10RaCid/7R2JDJ
l6RDFZJMUULs52n+K24TYVUJqog2Kehx8OBBcex4nnKpkOvVqHF3u/ijjz5K
fVpeuXKlDelsgKRABKQvcBSyygTIBJ03TtxLU/fff3+5ky+Bh0qOZKVFJiar
K3hW+5f2W7RoQQQrq4WTJk0SNtLT043NG55r1bp7HsDMFgViZmo+++yzxAZ1
6tSBIhMxI7cCXlVAgnAiJSUFBhhrkisBgjfnjX/wwQcSNBrr6urVq0L02rVr
VG7dunXv3r3tvSC2kf/SrUyLwkBOTs7TTz/Nh2XLlhk/hURdunQxEx1Rc/Lk
ydScO3cutG6GUJEvoSRDEQM+fvy4QcZtCcglwRtTvHFNSTdkRlCc2CNqb/0K
YYUowDPDzNGjR8t9SsIwMyO9V69eBhliRUJWzJ5//nlXMl+ZfBkUBtVUDODK
jODw/cKRI0fEj5kx77feektiM+NAlCz+vvvuo6b5VTiPgKrT0tLcysiuXLki
Tm/WrFkG1VCOLPZu2rTJx1fnssb1+uuvy1qWLLkYPyJpMvNpNG9DOROuODEt
tELoaaprAFlUV5ygcBhzqG1iZmlt6dKlESugwMzMzPj4eKkmq0x+dfGMGTOg
3rRpUy30iod0ptzAqbi4WDhnhEasgCwkI9P/ASqFige8l4/bofezZeDw7fOB
AwdEfLVuH04UkfUUXVkxsweoo3w9M+VamizNmcnuqyW+++47Ed94oaDqQhaC
QFFRkd+8+ADJrEHE14LVAJcvXxYBP/zwQ7958QESimuhd39+8+IJcOCxsbEG
AUb1hryZIpWuxv0rCeCCBQv85sUHzJ49W0Lx6rphGLk6depkkADOnDkztSrA
XmKO1MiOBqpx/8oSJVlzxAr0b1JVgL3+nT9/PrK3aNGiGvfvI488gowLFy70
mxcfILv9a9euXY37t2HDhsi4YsUKv3nxAYWFhRI/X7x40W9ePAH9e++99yLg
p59+6jcvPkD2Jbr1qrESQuW/X331ld+8+ACkFvEr7AhGBePMmTMi4JEjR/zm
xQcwbEX89evX+82LJ5DdKffcc091TfCNUVpaGhMTU42Xd7755hstdN6kap1V
dwtYteyzNX7/W3Uhm8T69+9fYf17+/bt5cuXVxJzghk5uZCenu43L55gzJgx
SDdp0qQKSwBRaWJione3H1iF7MZs06aNp+fjfAESJSUlybaiCpOusvWvbJyr
yBQY33Xjxg0V8HjnyhizjRo1km1FJhnTb5vk6/Xr12HVkm047F855qbY0N8n
YA9yqErz8kIVBTkj37t3b9xFfHz8/Pnz582b16NHD4+CW9loajK7px8HDRpU
p06dJ5988tq1a7m5ufXr1+dzu3btlixZYt69UxOJbCiTfiTaz8rKQjONGzfu
27fv7t27mTcdnt9XR6iiXcvgFujcnJycevXqFRUViYmK8jMyMjyaHD///HPZ
qVVu+1To3r07SaLsBk9NTR0wYAAcotg333xT+/fJTWPYG788tXfvXljF/s+e
PYuuhgwZQtgP6XXr1llqKhxyqHnYsGEO2zEACszOzoZKQUGBKhw+fDglixYt
8oiobI5FY+Xav+xDk3MEWugIoZo1ZP566qmnTBqhvf49d+4cjiIuLu7KlStS
cvr0aejWrVv30qVLlpoKhySJBmdpnUMWyvDMioRcR0bhtm3bvKBI+xJcmbmX
EhuYOHEiXSNGqH/ZJEcI8dsRJ5HSMFCN/uWpiD9FY1XOduGKVeHOnTspQUXO
O4UWnnvuudjYWI92YdE+s4kWOk2vCpFX3ux4FF+J0TKlmmlfwhj+ikvU3+og
I5ry8N5RoalJMC9HpL5x40apoN/FKqeQTN4/UC7krNzs2bOdNxUOQhe5f6C4
uFgV7tixQ/Ny68i4ceO00KFL8/o5evQoj/Ts2VN/fl/yx8zMzIh8ujJ+5Rhm
TEyMcs7wLNetuPXai0QA/09Y+/fff7vSoB7iamrUqEFcqgrxgRSOGDHCdXLg
woULzZo1izjoDCBGrr8TgE6Rvf3md31bnX+pTzgnU7wqhO7DDz9M4ZkzZ8zz
b0xF7hRy5balMjh06JD273PWfJCDGKjUdXJ3/jkUaSayUlCnufXnU1avXk0J
rJqfRGz0r6hCT1cutGnVqpWLkxchXMuWLbt06eK6w8TtNG/evFGjRqpluWtL
c+lypzKAipyltXQdNE+hTy10RFRKGPu9evVi/JJHm2/HRvwsU4DqX/qU7Eyc
m4vLbmqucX0rOEzm5+eLl8PhQEUOY3oUsZOCaaE3JpaUoy4C0kKHWYi6iWbp
XD54vX4ld3n16dMHQ3r77bcVG3gP842YJARvycnJrqtdrjsgZhg/fvz27dtJ
RrTQDXjuUrkTOofevn17wnWrnm3NmjVa6D0LIRlKSEtLI4K1cSG8vfwXX4HZ
N2nSZOzYsWpFMdrVXk4gMb9Haw6ShiCL+E8vNhWQAjARWP2/GOAKxcJSYWHh
HWc3uNpef1aXvP3www+auWU3G8DsCddr1669detW1xtXJOD/wQcfdD3zJcFp
0KDBsmXLrGqG+nLA+cSJEw55oINg4OTJk7ZbkBXRrKwsj955yeJnp06dXPcP
creDLAtj5OTFLpooTb388svEJFbNhgfl3lQtdHWMj+9JJUeWMM/54V8DyKVJ
5AvuugiJfPTQr8g5gZzrT0hI+O233yw9qA4ouc6SVcBJ+JKXd12MJcfFxRHO
uWjPhCvqMka5kNC5PxSQthOcmLwttgzU7YgC7yYmM5wo5RDD88FTZ0LK0LZt
28pwpYwx0EbNmjXN3+YdQMH5/oEKgLwa8JuLAAECBAgQIECAAAECBAgQIECA
AAECBAgQoFrh/yzc1J8=
    "], {{0, 47.4}, {96., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{120., 120.},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{96., 47.4},
  PlotRange->{{0, 96.}, {0, 47.4}}]], "Input",ExpressionUUID->"aad9c9f4-200b-\
4b48-997c-9fc3ec3b09a4"],

Cell[TextData[{
 "There are many shapes and ways to write the theorem, but in this case ",
 StyleBox["p",
  FontSlant->"Italic"],
 " is the number of ballots thrown for the candidate supposed to remain \
strictly in the lead, and ",
 StyleBox["q",
  FontSlant->"Italic"],
 " is the number of ballots thrown for the other candidate. In our case ",
 StyleBox["p",
  FontSlant->"Italic"],
 " = 9 and ",
 StyleBox["q",
  FontSlant->"Italic"],
 " = 2. This gives us:"
}], "Text",
 CellChangeTimes->{{3.9349692959016266`*^9, 3.9349693429573545`*^9}, {
  3.9349714385502453`*^9, 3.934971465242264*^9}, {3.9349718407940474`*^9, 
  3.9349718495808077`*^9}},ExpressionUUID->"d7b8577e-8c08-419b-a83f-\
5aede922291c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Binomial", "[", 
   RowBox[{
    RowBox[{"9", "+", "2"}], ",", " ", "2"}], "]"}], 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"9", "-", "2"}], ")"}], "/", 
    RowBox[{"(", 
     RowBox[{"9", "+", "2"}], ")"}]}], ")"}]}]], "Input",
 CellChangeTimes->{{3.934971470508856*^9, 3.9349715537113843`*^9}, {
  3.9349715880945883`*^9, 3.9349715989225388`*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"5ceabef4-e984-4522-9c9f-f09dedaf70d7"],

Cell[BoxData["35"], "Output",
 CellChangeTimes->{3.9349715463427143`*^9, 3.9349715907324877`*^9},
 CellLabel->"Out[2]=",ExpressionUUID->"56ac1ec2-691a-4651-9214-0e5f85db3e50"]
}, Open  ]],

Cell["\<\
This 35 would then be used to calculate the probability in the same way as in \
the previous solution, by having it be divided with the total number of ways. \
The resulting quotient would again be 7/11, which could already be discerned \
from Bertrand\[CloseCurlyQuote]s ballot theorem above as the second factor.\
\>", "Text",
 CellChangeTimes->{{3.934971734699127*^9, 
  3.9349718143050346`*^9}},ExpressionUUID->"f30fb711-6162-4013-9ea2-\
fc4b48cbf8b0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code and How-To-Run", "Section",
 CellChangeTimes->{{3.9349542419047785`*^9, 3.9349542420297003`*^9}, {
  3.9349639241750097`*^9, 
  3.9349639462501497`*^9}},ExpressionUUID->"6f74f2bf-a15d-4d5d-8cd0-\
63f075e8906d"],

Cell[TextData[{
 "All code was written in Python entirely by the two project members \
Sebastian and Simon, save the portions of the Python files which illustrate \
the paths between coordinates using matplotlib in a separate window. The code \
necessary to configure matplotlib and display the graphs using radio buttons \
to toggle between them was written using a combination of online resources \
and ChatGPT, edited to fit our needs and accept data in our produced format. \
In order to configure a set of radio buttons to switch between different \
plots in matplotlib, we used ",
 StyleBox["Greesh",
  IgnoreSpellCheck->True],
 " ",
 StyleBox["Manalla\[CloseCurlyQuote]s",
  IgnoreSpellCheck->True],
 " guide on the website ",
 StyleBox["geeksforgeeks, available as of 2024-09-10 by following the ",
  IgnoreSpellCheck->True],
 StyleBox[ButtonBox["hyperlink",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.geeksforgeeks.org/matplotlib-radio-buttons/"], None},
  ButtonNote->"https://www.geeksforgeeks.org/matplotlib-radio-buttons/"],
  IgnoreSpellCheck->True],
 StyleBox[" ",
  IgnoreSpellCheck->True],
 StyleBox[ButtonBox["here",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.geeksforgeeks.org/matplotlib-radio-buttons/"], None},
  ButtonNote->"https://www.geeksforgeeks.org/matplotlib-radio-buttons/"],
  IgnoreSpellCheck->True],
 ". All logic and code outside of this was hand written.\n\nNo code was \
necessary for the task of 3.2, seeing as we did not need to print all the \
permutations at hand, but rather count them. You will therefore only find \
files related to the tasks of 3.1.\n\nYou can find all the code in our ",
 ButtonBox["GitHub Repo",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://github.com/SimonLieb/Project_1"], None},
  ButtonNote->"https://github.com/SimonLieb/Project_1"],
 ". If the hyperlink does not work, copy-paste: \
https://github.com/SimonLieb/Project_1"
}], "Text",
 CellChangeTimes->{{3.9349639293032427`*^9, 3.9349641822744093`*^9}, {
  3.9349644725629807`*^9, 3.934964498127097*^9}, {3.934964581696556*^9, 
  3.9349646719394865`*^9}, {3.9349647642187953`*^9, 3.934965037136706*^9}, {
  3.934965107754937*^9, 3.9349651106448755`*^9}, {3.9349651671901927`*^9, 
  3.934965241480732*^9}, {3.9349661466665993`*^9, 3.934966157015646*^9}, {
  3.93496619295601*^9, 3.934966205806514*^9}, {3.9349662572382565`*^9, 
  3.9349662599937477`*^9}, {3.934966301049447*^9, 3.934966334012529*^9}, {
  3.934966371816879*^9, 3.934966487054468*^9}, {3.934966535855616*^9, 
  3.9349665365886936`*^9}, {3.934966568108612*^9, 
  3.9349665740306997`*^9}},ExpressionUUID->"84f1d7e2-5215-4d51-85a4-\
b6f589be78f3"],

Cell[CellGroupData[{

Cell["How to run", "Subsection",
 CellChangeTimes->{{3.9349650968859844`*^9, 
  3.9349650999513936`*^9}},ExpressionUUID->"9fe31c69-8ff2-476b-a021-\
e9d2c265644b"],

Cell["\<\
In the repository you will find four files named A.py, B.py, C.py, D.py. All \
four of these share a lot of code in common but have been tailored to answer \
the questions to 3.1 a), b), c) and d) respectively. You can compile the code \
in a development environment of your choice, or simply run it using Python \
either in the terminal or by double clicking it in the explorer. In order to \
run the code of B and C, you need to first make sure that you have the \
external library \[OpenCurlyDoubleQuote]matplotlib\[CloseCurlyDoubleQuote] \
installed. If you do not, you can achieve this by running \
\[OpenCurlyDoubleQuote]pip install matplotlib\[CloseCurlyDoubleQuote] in your \
terminal, assuming that you have added pip to your system PATH. Otherwise, \
the code will crash with an error message indicating that the import of the \
library at the top of the document has failed.

Once you are done running the python script, simply press ENTER in the \
terminal to terminate the program.\[LineSeparator]\[LineSeparator]All four of \
the Python files will print the results to their respective questions in the \
terminal, in addition to C.py and B.py showing the user the answers in \
graphs. All four python files have extensive comments before each method to \
explain the thought-process behind them and how they work.\
\>", "Text",
 CellChangeTimes->{{3.9349650739667683`*^9, 
  3.9349651132258577`*^9}},ExpressionUUID->"583545a9-dc2f-47ba-beb0-\
3638642bd282"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1152, 579.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
PageHeaders->{{None, None, None}, {
   Cell[
    TextData[{"KTH/ICT - Kommunikationssystem"}], "PageHeader", FontFamily -> 
    "Arial", FontSize -> 9], None, None}},
PageFooters->{{None, None, None}, {None, 
   Cell[
    TextData[{
      CounterBox["Page"]}], "PageNumber"], None}},
PrintingOptions->{"FacingPages"->False},
TaggingRules-><|"TryRealOnly" -> False|>,
TrackCellChangeTimes->True,
SpellingDictionaries->{"CorrectWords"->{"matplotlib", "py"}},
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (July 24, 2023)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell["Modify the definitions below to change the default appearance of all \
cells in a given style. \nMake modifications to any definition using commands \
in the Format menu.", "Text"], 
   Cell[
    CellGroupData[{
      Cell["Notebook Options Settings", "Section"], 
      Cell[
       StyleData["Notebook"], ShowCellBracket -> Automatic]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Title and Section Cells", "Section"], 
      Cell[
       CellGroupData[{
         Cell["Title", "Subsection"], 
         Cell[
          StyleData["Title"], FontFamily -> "Arial", FontSize -> 36, 
          FontWeight -> "Bold", FontColor -> GrayLevel[0.5]], 
         Cell[
          StyleData["Subtitle"], FontFamily -> "Arial", FontWeight -> "Bold"], 
         Cell[
          StyleData["Subsubtitle"], FontFamily -> "Arial", FontSize -> 18]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell[
         "Chapter", "Subsection", 
          CellChangeTimes -> {{3.6182073006504073`*^9, 
           3.6182073204926414`*^9}}], 
         Cell[
          StyleData["Chapter"], FontFamily -> "Arial", FontSize -> 34, 
          FontWeight -> "Plain", FontSlant -> "Plain", 
          FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}], 
         Cell[
          StyleData["Subchapter"], CellDingbat -> 
          StyleBox["\[FilledSmallSquare]", Alignment -> Baseline, 
            RGBColor[
            0.09803921568627451, 0.32941176470588235`, 0.6509803921568628]], 
          FontFamily -> "Arial", FontSize -> 28, FontWeight -> "Plain", 
          FontSlant -> "Plain", 
          FontVariations -> {
           "StrikeThrough" -> False, "Underline" -> False}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Section", "Subsection"], 
         Cell[
          StyleData["Section"], CellDingbat -> None, ShowGroupOpener -> True, 
          FontFamily -> "Arial", FontSize -> 24, FontWeight -> "Bold", 
          FontColor -> GrayLevel[0.5]], 
         Cell[
          StyleData["Subsection"], CellDingbat -> None, ShowGroupOpener -> 
          True, CellMargins -> {{40., 3.}, {8., 12.}}, FontFamily -> "Arial", 
          FontSize -> 18, FontWeight -> "Bold", FontColor -> GrayLevel[0.3]], 
         Cell[
          StyleData["Subsubsection"], CellDingbat -> None, ShowGroupOpener -> 
          True, CellMargins -> {{53., Inherited}, {2, 10}}, FontFamily -> 
          "Arial", FontSize -> 16, FontWeight -> "Bold", FontColor -> 
          GrayLevel[0.]], 
         Cell[
          StyleData["Subsubsubsection"], CellDingbat -> None, ShowGroupOpener -> 
          True, MenuSortingValue -> 1400, FontFamily -> "Arial Narrow", 
          FontSize -> 14, FontWeight -> "Bold", FontSlant -> "Plain", 
          FontVariations -> {"StrikeThrough" -> False, "Underline" -> False}, 
          FontColor -> GrayLevel[0]]}, Closed]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Body Text", "Section"], 
      Cell[
       CellGroupData[{
         Cell["Standard", "Subsection"], 
         Cell[
          StyleData["Text"], FontFamily -> "Times"], 
         Cell[
          StyleData["SmallText"], MenuSortingValue -> 1425, FontFamily -> 
          "Times"]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Display", "Subsection"], 
         Cell[
          CellGroupData[{
            Cell["Lists", "Subsubsection"], 
            Cell[
             StyleData["Item"], CellDingbat -> 
             StyleBox["\[FilledCircle]", Alignment -> Baseline, 
               GrayLevel[0.3]], FontFamily -> "Times"], 
            Cell[
             StyleData["ItemParagraph"], FontFamily -> "Times"], 
            Cell[
             StyleData["Subitem"], CellDingbat -> 
             StyleBox["\[FilledSmallCircle]", Alignment -> Baseline, 
               GrayLevel[0.3]], FontFamily -> "Times"], 
            Cell[
             StyleData["SubitemParagraph"], FontFamily -> "Times"], 
            Cell[
             StyleData["Subsubitem"], CellDingbat -> 
             StyleBox["\[FilledSmallCircle]", Alignment -> Baseline, 
               GrayLevel[0.5]], FontFamily -> "Times"], 
            Cell[
             StyleData["SubsubitemParagraph"], FontFamily -> "Times"], 
            Cell[
             StyleData["ItemNumbered"], FontFamily -> "Times"], 
            Cell[
             StyleData["SubitemNumbered"], FontFamily -> "Times"], 
            Cell[
             StyleData["SubsubitemNumbered"], FontFamily -> "Times"]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell["Templates", "Subsubsection"], 
            Cell[
             StyleData[
             "SideCaptionArray", StyleDefinitions -> StyleData["Text"]], 
             GridBoxOptions -> {
              GridBoxAlignment -> {"Columns" -> {Left}, "Rows" -> {Center}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}}], 
            Cell[
             StyleData[
             "SideCaption", StyleDefinitions -> StyleData["SmallText"]]]}, 
           Closed]]}, Closed]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Input and Output Cells", "Section"], 
      Cell[
       StyleData["Input"], ShowCellBracket -> True], 
      Cell[
       StyleData["InputOnly"], ShowCellBracket -> True], 
      Cell[
       StyleData["Code"], ShowCellBracket -> True], 
      Cell[
       StyleData["Output"], ShowCellBracket -> True], 
      Cell[
       StyleData["Message"], ShowCellBracket -> True], 
      Cell[
       StyleData["Print"], ShowCellBracket -> True]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Formulas and Programming", "Section"], 
      Cell[
       StyleData["InlineFormula"]], 
      Cell[
       StyleData["DisplayFormula"], FontFamily -> "Times"], 
      Cell[
       StyleData["DisplayFormulaNumbered"], FontFamily -> "Times"], 
      Cell[
       StyleData["Program"], ShowCellBracket -> True]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell["Citation Styles", "Section"], 
      Cell[
       StyleData["Reference"]]}, Closed]], 
   Cell[
    CellGroupData[{
      Cell[
       TextData[{"Styles for ", 
         StyleBox["Mathematica", FontSlant -> "Italic"], 
         " System\[Hyphen]specific Elements"}], "Section"], 
      Cell[
       CellGroupData[{
         Cell["Default Box Styles", "Subsection"], 
         Cell[
          StyleData["Graphics"], FontFamily -> "Times"], 
         Cell[
          StyleData["Graphics3D"], FontFamily -> "Times"], 
         Cell[
          StyleData["NetworkGraphics"], FontFamily -> "Times"]}, Closed]]}, 
     Closed]]}, Visible -> False, FrontEndVersion -> 
  "13.3 for Microsoft Windows (64-bit) (July 24, 2023)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"6b424442-047d-498f-a35c-fb9137aae236"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 270, 4, 81, "Title",ExpressionUUID->"2e086750-1cf1-4c43-bc57-bac07652a650"],
Cell[853, 28, 188, 6, 54, "Text",ExpressionUUID->"679e81cd-23f2-4ac3-aad0-55498a6469d8"],
Cell[1044, 36, 221, 6, 54, "Text",ExpressionUUID->"39bfcd1a-7896-4364-9d2c-9b6c98366775"],
Cell[CellGroupData[{
Cell[1290, 46, 227, 4, 61, "Subchapter",ExpressionUUID->"2760ab7a-2fed-4ae4-a63f-890119ad5062"],
Cell[CellGroupData[{
Cell[1542, 54, 154, 3, 59, "Section",ExpressionUUID->"28ab532a-4f99-4328-b494-a8a51a0e3e70"],
Cell[CellGroupData[{
Cell[1721, 61, 81, 0, 41, "Subsection",ExpressionUUID->"4df8543c-22f8-401d-8973-c66d5fa62864"],
Cell[1805, 63, 2078, 33, 348, "Text",ExpressionUUID->"8ad5d4da-afa2-434b-a402-a9f9b705fa59"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3920, 101, 83, 0, 41, "Subsection",ExpressionUUID->"39a0ef6c-6a2c-4081-9062-84513a76c571"],
Cell[4006, 103, 1556, 26, 243, "Text",ExpressionUUID->"90c1cbf5-a4eb-4e8c-ad08-b66c37545d27"],
Cell[5565, 131, 638, 20, 47, "Input",ExpressionUUID->"a80c6013-eebe-4815-99b4-d257d30cd140"],
Cell[6206, 153, 873, 25, 54, "Text",ExpressionUUID->"dac7d079-5a1d-44e2-92c2-3e9f49886386"],
Cell[7082, 180, 314, 10, 45, "Input",ExpressionUUID->"dc304521-ab96-44c8-a91b-ddd9e65b2ef1"],
Cell[7399, 192, 1294, 22, 138, "Text",ExpressionUUID->"a34d7bec-dc6c-4e76-9b40-e2ff30e28ace"],
Cell[8696, 216, 1044, 16, 138, "Text",ExpressionUUID->"54cbf463-30b2-4ce0-adb2-e23f248c38a6"],
Cell[9743, 234, 315, 10, 45, "Input",ExpressionUUID->"22c74d0b-d2b7-450a-9665-f2bb8e5f2b17"],
Cell[10061, 246, 1018, 16, 159, "Text",ExpressionUUID->"077534bf-48d2-4c68-96cb-1ae921a2bb97"],
Cell[11082, 264, 313, 10, 45, "Input",ExpressionUUID->"da80ae0c-8421-4e52-9d6d-31afcc9bbb07"],
Cell[11398, 276, 1146, 19, 159, "Text",ExpressionUUID->"62de34ba-dcd3-4ca5-ae28-7c93241fb7fd"],
Cell[12547, 297, 542, 19, 45, "Input",ExpressionUUID->"0fdf2727-bb0f-4303-8b22-a791541bfa66"],
Cell[13092, 318, 3121, 49, 495, "Text",ExpressionUUID->"abceaff9-7f5d-4f3d-8401-2dd49d09a3f1"],
Cell[16216, 369, 321, 10, 45, "Input",ExpressionUUID->"c74f9091-5539-45d7-8b1c-2915e2cf2f11"],
Cell[16540, 381, 1978, 30, 243, "Text",ExpressionUUID->"9c1180d7-7cd9-4ee5-b922-4488391b2dc3"],
Cell[18521, 413, 237, 6, 27, "Input",ExpressionUUID->"fd2eecc7-4f0d-4789-9b66-11c9c2168bd4"],
Cell[18761, 421, 532, 13, 33, "Text",ExpressionUUID->"3c35fad2-59ee-4558-8bee-95b59127c59b"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[19354, 441, 232, 4, 61, "Subchapter",ExpressionUUID->"099ee814-8db2-4a63-8b88-1c9110418edc"],
Cell[CellGroupData[{
Cell[19611, 449, 156, 3, 59, "Section",ExpressionUUID->"4332511c-4b0e-4fff-a557-cc5bbf57a309"],
Cell[CellGroupData[{
Cell[19792, 456, 81, 0, 41, "Subsection",ExpressionUUID->"5c103694-4f0e-4da5-8449-310c802b22a8"],
Cell[19876, 458, 638, 11, 96, "Text",ExpressionUUID->"c299c6da-f79a-4138-80fb-9d77fb5a52bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[20551, 474, 83, 0, 41, "Subsection",ExpressionUUID->"7b609863-e4df-4ca9-8aa1-cbe4137518cf"],
Cell[20637, 476, 1695, 26, 243, "Text",ExpressionUUID->"e21c54be-d0fb-4236-8998-57acdd091c0d"],
Cell[22335, 504, 467, 13, 49, "Text",ExpressionUUID->"1d80f4a4-9cbf-4e19-848c-a7e5727369dd"],
Cell[22805, 519, 940, 17, 96, "Text",ExpressionUUID->"bb662758-9107-4256-81fe-94034b87d5a5"],
Cell[23748, 538, 367, 11, 49, "Text",ExpressionUUID->"223a39d8-b370-4b05-8f7d-365cc73ab8de"],
Cell[24118, 551, 430, 8, 54, "Text",ExpressionUUID->"fd13580f-2df5-4cdb-b66f-f99f25de5dbb"],
Cell[24551, 561, 584, 20, 66, "Text",ExpressionUUID->"b8172aff-bdcd-42b9-a27f-5a260fa60dbb"],
Cell[25138, 583, 382, 8, 33, "Text",ExpressionUUID->"d160651b-70cb-4776-a22b-7d64bc7eafe6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25557, 596, 216, 4, 41, "Subsection",ExpressionUUID->"e65161cf-4c93-4f9e-badd-0c31a93dbab3"],
Cell[25776, 602, 884, 17, 54, "Text",ExpressionUUID->"e874269b-a34b-444e-be32-333f03326675"],
Cell[26663, 621, 5269, 92, 60, "Input",ExpressionUUID->"aad9c9f4-200b-4b48-997c-9fc3ec3b09a4"],
Cell[31935, 715, 705, 19, 54, "Text",ExpressionUUID->"d7b8577e-8c08-419b-a83f-5aede922291c"],
Cell[CellGroupData[{
Cell[32665, 738, 481, 13, 28, "Input",ExpressionUUID->"5ceabef4-e984-4522-9c9f-f09dedaf70d7"],
Cell[33149, 753, 175, 2, 32, "Output",ExpressionUUID->"56ac1ec2-691a-4651-9214-0e5f85db3e50"]
}, Open  ]],
Cell[33339, 758, 466, 8, 54, "Text",ExpressionUUID->"f30fb711-6162-4013-9ea2-fc4b48cbf8b0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[33854, 772, 221, 4, 59, "Section",ExpressionUUID->"6f74f2bf-a15d-4d5d-8cd0-63f075e8906d"],
Cell[34078, 778, 2682, 53, 222, "Text",ExpressionUUID->"84f1d7e2-5215-4d51-85a4-b6f589be78f3"],
Cell[CellGroupData[{
Cell[36785, 835, 162, 3, 41, "Subsection",ExpressionUUID->"9fe31c69-8ff2-476b-a021-e9d2c265644b"],
Cell[36950, 840, 1482, 23, 222, "Text",ExpressionUUID->"583545a9-dc2f-47ba-beb0-3638642bd282"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

